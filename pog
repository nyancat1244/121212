import 'package:flutter/material.dart';
import 'dart:convert'; // 為了使用 LineSplitter()，直接將題庫一行一行拆成字串陣列

const String questionBank = '''
1.(3)How would you describe a tragedy? ①I failed the finals.②I fell and hit the ground. ③A plane crashed into Twin Towers on 2001/9/11. ④I overslept and didn't attend a very important meeting.
2.(4)What is best described as a group of good friends?①Is friendly towards each other ②Is often joking about one particular person ③One person complains about something while other laughs at the person ④They're all good friends.
3.(3)A or B?①A ②B ③C ④who the fuck came up with all these goofy ahh questions at 1 AM??
4.(2)What comes after the sequence "Eu"?①rope ②all of them ③thanasia ④phoria
5.(3)I put the new Forgis on the Jeep①I keep a hundred racks inside my jeans ②'Cause all my niggas got it out the streets ③I trap until the bloody bottoms is underneath ④I remember hittin' the mall with the whole team 
6.(4)Is Apex Legends a good game?①Yes ②No ③lol no④there's no fucking way thats a good game
7.(2)Is Valorant a good game①Yes ②its shit ③debatable ④maybe
8.(2)Is CSGO a good game①No ②Yes ③maybe ④nah
9.(4)What would be a synonym of "Confused"?①big brain ②methodical ③smol brain ④perplexed
10.(2)What would you call a black man working in a cotton field in the 18th century?①a paid worker ②a "i was forced to work here" worker ③a volunteer ④a nice guy
11.(1)We live①We love We lie ②Under the sea ③Monday left me broken ④Can you blow my whistle baby whistle baby let me know
12.(4)Where would you go if you were rejected by the art academy?①seek other professions ②apply for other art academies ③start finding a job ④conquer the entire Europe with the homies
13.(1)What would be a synonym and antonym for "Empty"?①Vacant, Occupied ②Populated, bare ③Lengthy, short ④massive, compact
14.(3)What is the alternative name for crocodiles? (yes it is actually a thing)①swamp tiger ②swamp monkey ③swamp puppy ④swamp kitty
15.(1)The word "complicated" has the same meaning as "intricate"①yes ②no ③idk ④no idea
16.(3)The word "ingest" means①to construct ②to abstain ③to consume ④to hoard
17.(1)What values are agreed by most people?①Freedom ②Socialism ③Communism ④Facism
18.(4)When you "skip", you①run as fast as you can ②stop ③jump as high as you can ④hop foward in a consistent and rapid way
19.(4)What do you call "just faster than the speed of sound"①lightspeed ②swift ③subsonic ④supersonic
20.(4)If a person is heavy, he is①slim ②fit ③strong ④overweight
''';

class Question {
  /// 題目內容
  late final String _content;

  /// 題目選項
  late final List<String> _options;

  /// 題目答案
  late final int _answer;

  // ignore: unused_element
  Question._(); // 避免使用者呼叫預設建構式

  Question.empty() // 建構空題目
  {
    _content = 'The End!!'; // 題目
    _options = ['Thank', 'You', 'For', 'Answering!']; // 選項
    _answer = 0; // 答案
  }

  Question.set(String question) // 以輸入字串建構題目
  {
    String removeEndWithPeriod(String s) {
      return s.endsWith("。") ? s.substring(0, s.length - 1) : s;
    }

    int idxAns = question.indexOf("(") + 1;
    int idxContentStart = question.indexOf(")") + 1;
    int idxOptionOne = question.indexOf("①");
    int idxOptionTwo = question.indexOf("②");
    int idxOptionThree = question.indexOf("③");
    int idxOptionFour = question.indexOf("④");

    _content = question.substring(idxContentStart, idxOptionOne).trim(); // 題目
    int originalAnswer =
        int.parse(question.substring(idxAns, idxAns + 1)); // 原答案

    // 將選項洗牌
    List<String> s = [];
    s.add(removeEndWithPeriod(
        question.substring(idxOptionOne + 1, idxOptionTwo).trim())); // 原選項 1
    s.add(removeEndWithPeriod(
        question.substring(idxOptionTwo + 1, idxOptionThree).trim())); // 原選項 2
    s.add(removeEndWithPeriod(
        question.substring(idxOptionThree + 1, idxOptionFour).trim())); // 原選項 3
    s.add(removeEndWithPeriod(
        question.substring(idxOptionFour + 1).trim())); // 原選項 4
    List<int> t = [0, 1, 2, 3];
    t.shuffle();

    _options = [];
    for (int i = 0; i < 4; i++) {
      _options.add(s[t[i]]); // 加入亂序後的選項
      if (originalAnswer == t[i] + 1) {
        _answer = i;
      }
    }
  }

  @override
  String toString() =>
      "(${_answer + 1}) $_content ①${_options[0]} ②${_options[1]} ③${_options[2]} ④${_options[3]}";

  /// 取得題目內容
  String getContent() {
    return _content;
  }

  /// 取得題目選項
  List<String> getOptions() {
    return _options;
  }

  /// 取得題目答案
  int getAnswer() {
    return _answer;
  }
}

class ExamSimulator {
  //---------------------------------
  // 成員變數

  /// 空題目，無題目需顯示時用
  final Question emptyQuestion = Question.empty();

  /// 題目清單
  List<Question> questions = [];

  /// 目前要顯示的題目索引
  int currentIndex = 0;

  //--------------------------------
  // 成員方法

  /// 取得目前要顯示的題目索引
  int getCurrentIndex() {
    return currentIndex;
  }

  /// 取得題目清單長度
  int getNumberOfQuestions() {
    return questions.length;
  }

  /// 取得目前要顯示的題目。若目前索引已大於題目清單長度，則顯示空題目。否則顯示目前題目。
  Question getCurrentQuestion() {
    return currentIndex >= questions.length
        ? emptyQuestion
        : questions[currentIndex];
  }

  /// 設定顯示下一題
  bool nextQuestion() {
    if (currentIndex < questions.length) {
      currentIndex++;
      return true;
    } else {
      return false;
    }
  }

  /// 準備考題
  void prepareExam() {
    // 將題庫依行拆成單一題
    List<String> lineQuestions = const LineSplitter().convert(questionBank);
    // 將題目清空
    questions.clear();
    // 將題目清單的所有題目，逐一加入題目陣列中
    for (int i = 0; i < lineQuestions.length; i++) {
      questions.add(Question.set(lineQuestions[i])); // 解析題目內容，取得題目、選項、答案
    }
    // 將題目洗牌
    questions.shuffle();
    // 歸零目前要顯示的題目索引
    currentIndex = 0;
  }
}

void main() {
  // MaterialApp 的屬性 debugShowCheckedModeBanner 設為 false，在畫面右上角就不會顯示一個 debug 圖案
  runApp(const MaterialApp(
      home: SafeArea(child: WelcomePage()), debugShowCheckedModeBanner: false));
}

// 入口頁面
class WelcomePage extends StatelessWidget {
  const WelcomePage({Key? key}) : super(key: key);
  @override
  Widget build(BuildContext context) {
    return Scaffold(
        body: Center(
            child: Container(
                color: Colors.white,
                child: Column(children: [
                  const SizedBox(
                    height: 50,
                  ),
                  const Text(
                    "This is a normal English test. \n or is it? \n Good luck! \n btw purple is good color",
                    softWrap: true,
                    style: TextStyle(fontSize: 20),
                  ),
                  const Divider(
                    height: 20,
                    thickness: 5,
                    indent: 20,
                    endIndent: 20,
                    color: Colors.deepPurpleAccent,
                  ),
                  const SizedBox(
                    height: 10,
                  ),
                  ElevatedButton(
                      style: ElevatedButton.styleFrom(
                          elevation: 78, primary: Colors.deepPurpleAccent),
                      onPressed: () {
                        Navigator.push(context,
                            MaterialPageRoute(builder: (context) {
                          return const QuestionPage();
                        }));
                      },
                      child: const Text("Start...?",
                          style: TextStyle(
                            fontSize: 45,
                            color: Colors.white,
                          )))
                ]))));
  }
}

// 測驗頁面
class QuestionPage extends StatefulWidget {
  const QuestionPage({Key? key}) : super(key: key);
  @override
  State<QuestionPage> createState() => _QuestionPageState();
}

// 測驗頁面的狀態內容
class _QuestionPageState extends State<QuestionPage> {
  late ExamSimulator examSimulator; // 測驗模擬器
  late Question currentQuestion; // 目前的問題
  int correctAnswerCount = 0; // 回答正確題數
  int totalQuestionCount = 0; // 總題數
  int answeredCount = 0; // 已完成題數
  int selectedAnswerIndex = -1; // 選擇的答案
  bool isExamEnd = false; // 是否測驗結束
  bool isAnswered = false; // 是否已回答完問題
  // 選項按鈕的預設背景色
  static const List<Color> optionDefaultColors = <Color>[
    Colors.purple,
    Colors.purpleAccent,
    Colors.deepPurple,
    Colors.deepPurpleAccent,
  ];
  late List<Color> optionCurrentColors;

  @override
  initState() {
    // 建立測驗模擬器
    examSimulator = ExamSimulator();
    examSimulator.prepareExam();
    currentQuestion = examSimulator.getCurrentQuestion();
    // 初始化答題狀態
    correctAnswerCount = 0; // 回答正確題數
    totalQuestionCount = examSimulator.getNumberOfQuestions(); // 總題數
    answeredCount = 0; // 已完成題數
    selectedAnswerIndex = -1; // 選擇的答案
    isExamEnd = false; // 是否測驗結束
    isAnswered = false; // 是否已回答完問題
    optionCurrentColors = optionDefaultColors.toList(); // 預設選項的背景色
    super.initState();
  }

  // 按下選項按鈕的反應
  void handleOptionButtonOnPress(int selectedOptionIndex) {
    // 還沒回答問題，選項按鈕才有反應。回答完就不反應。考完試也不反應。
    if (isExamEnd == false && isAnswered == false) {
      setState(() {
        selectedAnswerIndex = selectedOptionIndex;
        isAnswered = true;
        answeredCount++;
        // 依選擇的答案，設定按鈕背景色，以及答對題數
        optionCurrentColors[currentQuestion.getAnswer()] = Colors.greenAccent;
        if (selectedOptionIndex == currentQuestion.getAnswer()) {
          correctAnswerCount++;
        } else {
          optionCurrentColors[selectedOptionIndex] = Colors.redAccent;
        }
      });
    }
  }

  // 按下螢幕畫面的反應
  void handleScreenOnTap() {
    // 若考試尚未結束，在答題完後，點一下畫面，換下一題。
    if (isExamEnd == false && isAnswered == true) {
      setState(() {
        isAnswered = false;
        examSimulator.nextQuestion();
        isExamEnd = answeredCount >= totalQuestionCount ? true : false;
        currentQuestion = examSimulator.getCurrentQuestion();
        optionCurrentColors = optionDefaultColors.toList(); // 預設選項的背景色
      });
    }
  }

  // 用函式建立題目
  Widget buildQuestion() {
    return Padding(
        padding: const EdgeInsets.all(15.0),
        child: Text(currentQuestion.getContent(),
            style: const TextStyle(fontSize: 16, color: Colors.black)));
  }

  // 用函式建立選項
  Widget buildOptions() {
    // 取得選項內容
    List<String> options = currentQuestion.getOptions();
    // 用函式建立單一選項按鈕
    Widget buildOption(String optionContent, int optionIndex) {
      // 判斷選項內容是否加上題號
      optionContent = optionContent.isNotEmpty
          ? '${optionIndex + 1}. $optionContent'
          : optionContent;

      return Padding(
          padding: const EdgeInsets.symmetric(horizontal: 10),
          child: OutlinedButton(
              onPressed: () =>
                  handleOptionButtonOnPress(optionIndex), // 按下選項按鈕的反應
              style: OutlinedButton.styleFrom(
                  // 選項按鈕的設計
                  shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(30)), // 邊界形狀
                  side: const BorderSide(color: Colors.lime), // 邊界顏色
                  foregroundColor: Colors.indigo,
                  // 以答對、答錯、是否已答題，來決定選項按鈕的背景顏色
                  backgroundColor: optionCurrentColors[optionIndex]),
              child: Align(
                  alignment: Alignment.centerLeft,
                  child: Padding(
                      padding: const EdgeInsets.all(15.0),
                      child: Text(optionContent,
                          style: const TextStyle(
                              fontSize: 16, color: Colors.white))))));
    }

    return Column(
      children: [
        buildOption(options[0], 0),
        const SizedBox(height: 10),
        buildOption(options[1], 1),
        const SizedBox(height: 10),
        buildOption(options[2], 2),
        const SizedBox(height: 10),
        buildOption(options[3], 3),
      ],
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        appBar: AppBar(
            backgroundColor: Colors.deepPurpleAccent[400],
            leading: IconButton(
              icon: const Icon(Icons.arrow_back, color: Colors.white),
              onPressed: () => Navigator.of(context).pop(),
            ),
            title: Text(
                "Total : Finish : Correct = $totalQuestionCount : $answeredCount : $correctAnswerCount"),
            centerTitle: true),
        body: InkWell(
            // InkWell 與 GestureDetector 相比，多了點擊產生漣漪特效
            splashColor: Colors.purple,
            onTap: handleScreenOnTap,
            child: Column(
              children: [
                buildQuestion(), // 用函式建立題目
                const Divider(),
                buildOptions(), // 用函式建立選項
              ],
            )));
  }
}
